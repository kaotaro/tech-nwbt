{"name":"[実習1]Bluetooth機能を制御する","tagline":"ネットワーク（４）Bluetooth","body":"# 準備\r\nzipファイルを解答して「BluetoothPractice1」プロジェクトをAndroidStudioで開く。\r\n\r\n# 1.Bluetooth機能を有効にする\r\n\r\n## AndroidManifest.xml\r\nAndroidManifest.xmlにパーミッションを追加する。\r\n\r\n```\r\n<uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\r\n<uses-permission android:name=\"android.permission.BLUETOOTH\"/>\r\n```\r\n\r\n## MainActivity.java\r\n\r\n**initEnableButton()** メソッドを完成させます。\r\n\r\n①BluetoothAdapterのインスタンス取得をするコードを(en1-1)に書きましょう。\r\n\r\n```\r\nbtAdapter = BluetoothAdapter.getDefaultAdapter();\r\n```\r\n\r\n②1で取得したインスタンスの状態によって処理を分け、適切なToastや処理を(en1-2)に実装します。\r\n\r\n```\r\nif (btAdapter == null) {\r\n\tToast.makeText(getApplicationContext(),\r\n             “この端末はBluetoothがサポートされていません。”,\r\n　　　　　　　Toast.LENGTH_SHORT).show();\r\n\treturn;\r\n}\r\nif (btAdapter.isEnabled()) {\r\n\tToast.makeText(getApplicationContext(),\r\n\t  \"Bluetoothは既に有効になっています。\", Toast.LENGTH_SHORT)\r\n\t  .show();\r\n}else {\r\n\tIntent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n\tstartActivityForResult(intent, REQUEST_BT_ENABLE);\r\n}\r\n```\r\n③onActivityResultコールバックメソッドを(en1-3) に実装します。\r\n①で実装したBluetooth機能を有効にするインテントを発行後の結果を受け取ります。\r\n```\r\n@Override\r\nprotected void onActivityResult(int reqestCode, \r\n\t\t\t\tint resultCode, Intent data) {\r\n   if (reqestCode == REQUEST_BT_ENABLE) {\r\n\tif (resultCode == Activity.RESULT_OK) {\r\n\t\tToast.makeText(getApplicationContext(),\r\n\t\t\t\"Bluetoothを有効にしました。”,\tToast.LENGTH_SHORT).show();\r\n\t} else {\r\n\t\tToast.makeText(getApplicationContext(), \r\n\t\t\t\"Bluetooth有効に失敗しました。\",Toast.LENGTH_SHORT).show();\r\n\t}\r\n\treturn;\r\n   }\r\n}\r\n```\r\n\r\n\r\n# 他のBluetooth機器をスキャンする\r\n\r\n## MainActivity.java\r\n\r\n**initDiscoverButton()** メソッドを完成させます。\r\n\r\n①BluetoothAdapterを取得し、もう既に探索中だったら一度キャンセルするコードを(en2-1)に書きましょう。\r\n\r\n```\r\nif (btAdapter == null) {\r\n\tbtAdapter = BluetoothAdapter.getDefaultAdapter();\r\n}\r\nif (btAdapter.isDiscovering()) {\r\n\tbtAdapter.cancelDiscovery();\r\n}\r\n```\r\n\r\n②外部機器探索開始するコードを(en2-2)に書きましょう。\r\n\r\n```\r\nbtAdapter.startDiscovery();\r\n```\r\n\r\n## ブロードキャストレシーバーを実装します。\r\n\r\n### ブロードキャストレシーバークラスを作成\r\n\r\nMainActivityクラスのインナークラスとして(en2-3)に作成してください。\r\nこのブロードキャストレシーバーは外部機器探索中にBluetooth機器を発見した場合に、アクションインテントを受け取るためのものです。\r\nACTION_FOUND：デバイスが発見された場合\r\n　　→BluetoothDeviceオブジェクトを取り出してListに格納する\r\nACTION_DISCOVERY_FINISHED：デバイス検索が終了した場合\r\n　　→デバイス探索をキャンセルして終了通知をToastで表示する\r\n\r\n```\r\nprivate BroadcastReceiver mReceiver = new BroadcastReceiver() {\r\n  @Override\r\n  public void onReceive(Context context, Intent intent) {\r\n\r\n    String action = intent.getAction();\t\r\n    if (BluetoothDevice.ACTION_FOUND.equals(action)) {\t\t\r\n        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\r\n        newDeviceList.add(device);\r\n    }else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {\r\n  \tbtAdapter.cancelDiscovery();\r\n  \tToast.makeText(getApplicationContext(), \r\n          “外部機器を探索開始終了しました”,Toast.LENGTH_SHORT).show();\r\n\r\n  \tadapter.clear();\r\n  \tif (newDeviceList.size() == 0) {\r\n\t\tadapter.add(\"デバイスがありません\");\r\n  \t}\r\n  \tfor (BluetoothDevice device : newDeviceList) {\r\n    \tString name = device.getName();\r\n    \tLog.i(\"MainActivity\", \"デバイス名 = \" + name);\r\n    \tadapter.add(name);\r\n  \t}\r\n  \tadapter.notifyDataSetChanged();\r\n\t  \r\n        if (mReceiver != null) {\r\n\t  unregisterReceiver(mReceiver);\r\n\t  mReceiver = null;\r\n        }\r\n   }\r\n  }\r\n};\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}