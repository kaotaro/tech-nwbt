{"name":"実習手順","tagline":"ネットワーク（４）Bluetooth通信・ネットワーク（５）Wi-Fi通信","body":"# [実習1]Bluetooth機能を制御する\r\n\r\n＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋\r\n# 準備（昨日お休みをした人向け）\r\nお休みした人は、既に完成しているプロジェクトを実機で動かすところから開始します。\r\nコードのトレースは、講義資料と合わせて各自で復習してください。\r\n\r\n① kaotaro-tech-nwbt-ee67efd.zipファイルを解凍する。\r\n\r\n② AndroidStudioで新しいプロジェクトを作成する\r\n```\r\nプロジェクト名：BluetoothPractice\r\n```\r\n③ 下記の場所にある「BluetoothPractice」プロジェクトの中の必要なソースコード、リソースファイルをAndroidStudioの「BluetoothPractice」にコピーする。\r\n```\r\n（zipの解凍先フォルダ）kaotaro-tech-nwbt-ee67efd\r\n > practice > Bluetooth > BluetoothPractice\r\n\r\nコピーするもの\r\n・MainActivity.java\r\n・res > layout > activity_main.xml\r\n・res > values > strings.xml\r\n```\r\n④ AndroidManifest.xmlにパーミッションを追加する。\r\n\r\n_# ここまでできたら、実機で動かしてみてください。_\r\n\r\n＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋\r\n\r\n# 準備\r\nkaotaro-tech-nwbt-ee67efd.zipファイルを解凍して「BluetoothPractice1」プロジェクトをAndroidStudioで開く。\r\n\r\n```\r\nkaotaro-tech-nwbt-ee67efd > practice > Bluetooth > BluetoothPractice1\r\n```\r\n\r\n# 1. Bluetooth機能を有効にする\r\n\r\n## AndroidManifest.xml\r\nAndroidManifest.xmlにパーミッションを追加する。\r\n\r\n```\r\n<uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\r\n<uses-permission android:name=\"android.permission.BLUETOOTH\"/>\r\n```\r\n\r\n## MainActivity.java\r\n\r\n**initEnableButton()** メソッドを完成させます。\r\n\r\n① BluetoothAdapterのインスタンス取得をするコードを(en1-1)に書きましょう。\r\n\r\n```\r\nbtAdapter = BluetoothAdapter.getDefaultAdapter();\r\n```\r\n\r\n② ①で取得したインスタンスの状態によって処理を分け、適切なToastや処理を(en1-2)に書きましょう。\r\n\r\n```\r\nif (btAdapter == null) {\r\n\tToast.makeText(getApplicationContext(),\r\n             “この端末はBluetoothがサポートされていません”, Toast.LENGTH_SHORT).show();\r\n\treturn;\r\n}\r\nif (btAdapter.isEnabled()) {\r\n\tToast.makeText(getApplicationContext(),\r\n\t  \"Bluetoothは既に有効になっています\", Toast.LENGTH_SHORT).show();\r\n}else {\r\n\tIntent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n\tstartActivityForResult(intent, REQUEST_BT_ENABLE);\r\n}\r\n```\r\n\r\n③ onActivityResultコールバックメソッドを(en1-3) に実装します。②で実装したBluetooth機能を有効にするインテントを発行後の結果を受け取ります。\r\n\r\n```\r\n@Override\r\nprotected void onActivityResult(int reqestCode, \r\n\t\t\t\tint resultCode, Intent data) {\r\n\r\n   if (reqestCode == REQUEST_BT_ENABLE) {\r\n\tif (resultCode == Activity.RESULT_OK) {\r\n\t\tToast.makeText(getApplicationContext(),\r\n\t\t\t\"Bluetoothを有効にしました。”,\tToast.LENGTH_SHORT).show();\r\n\t} else {\r\n\t\tToast.makeText(getApplicationContext(), \r\n\t\t\t\"Bluetooth有効に失敗しました。\",Toast.LENGTH_SHORT).show();\r\n\t}\r\n\treturn;\r\n   }\r\n\r\n}\r\n```\r\n\r\n_# ここまでできたら確認！_\r\n\r\n# 2. 他のBluetooth機器をスキャンする\r\n\r\n## MainActivity.java\r\n\r\n**initDiscoverButton()** メソッド内にコードを書いて完成させます。\r\n\r\n① BluetoothAdapterを取得し、もう既に探索中だったら一度キャンセルするコードを(en2-1)に書きましょう。\r\n\r\n```\r\nif (btAdapter == null) {\r\n\tbtAdapter = BluetoothAdapter.getDefaultAdapter();\r\n}\r\nif (btAdapter.isDiscovering()) {\r\n\tbtAdapter.cancelDiscovery();\r\n}\r\n```\r\n\r\n② 外部機器探索開始するコードを(en2-2)に書きましょう。\r\n\r\n```\r\nbtAdapter.startDiscovery();\r\n```\r\n\r\n\r\n\r\n## ブロードキャストレシーバーを実装します。\r\n\r\n① ブロードキャストレシーバークラスを作成します。\r\n\r\nこのブロードキャストレシーバーは外部機器探索中にBluetooth機器を発見した場合に、アクションインテントを受け取るためのものです。\r\n\r\n```\r\nACTION_FOUND：デバイスが発見された場合\r\n → BluetoothDeviceオブジェクトを取り出してListに格納する\r\nACTION_DISCOVERY_FINISHED：デバイス検索が終了した場合\r\n → デバイス探索をキャンセルして終了通知をToastで表示する\r\n```\r\n\r\nMainActivityクラスのインナークラスとして(en2-3)に作成してください。\r\n\r\n```\r\nprivate BroadcastReceiver mReceiver = new BroadcastReceiver() {\r\n\r\n  @Override\r\n  public void onReceive(Context context, Intent intent) {\r\n\r\n    String action = intent.getAction();\t\r\n\r\n    if (BluetoothDevice.ACTION_FOUND.equals(action)) {\t\r\n\t\r\n        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\r\n        newDeviceList.add(device);\r\n\r\n    } else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {\r\n\r\n  \tbtAdapter.cancelDiscovery();\r\n\r\n  \tToast.makeText(getApplicationContext(), \r\n          “外部機器を探索開始終了しました”,Toast.LENGTH_SHORT).show();\r\n\r\n  \tadapter.clear();\r\n  \tif (newDeviceList.size() == 0) {\r\n\t\tadapter.add(\"デバイスがありません\");\r\n  \t}\r\n  \tfor (BluetoothDevice device : newDeviceList) {\r\n    \tString name = device.getName();\r\n    \tLog.i(\"MainActivity\", \"デバイス名 = \" + name);\r\n    \tadapter.add(name);\r\n  \t}\r\n  \tadapter.notifyDataSetChanged();\r\n\t  \r\n        if (mReceiver != null) {\r\n\t  unregisterReceiver(mReceiver);\r\n\t  mReceiver = null;\r\n        }\r\n\r\n   }\r\n  }\r\n\r\n};\r\n```\r\n\r\n② インテントフィルターを作成して登録します。\r\n\r\n**onCreate**メソッド内にコードを書きます。\r\n\r\n作成したブロードキャストレシーバーを受け取るためのIntentFilterを作成するコードを(en2-4)に書き、それをシステムに登録するコードを(en2-5)に書きましょう。\r\n\r\n```\r\nIntentFilter filter = new IntentFilter();\r\nfilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);\r\nfilter.addAction(BluetoothDevice.ACTION_FOUND);\r\n\r\nregisterReceiver(mReceiver, filter);\r\n```\r\n\r\n# 3. 既にペアリングされたBluetooth機器の情報を取得する\r\n\r\n## MainActivity.java\r\n\r\n**initBoundedButton()** メソッドを完成させます。\r\n\r\n① ペアリング済みの端末情報一覧を取得するコードを(en３-1)に書きましょう。\r\n\r\n```\r\nSet<BluetoothDevice> boundedDevices = btAdapter.getBondedDevices();\r\n```\r\n\r\n② ①で取得した一覧をリスト表示するためにアダプタにセットするコードを(en３-2)に書きましょう。\r\n\r\n```\r\nadapter2.clear();\r\nif (boundedDevices.size() == 0) {\r\n\tadapter2.add(\"ペアリング済み端末なし\");\r\n}\r\nfor (BluetoothDevice device : boundedDevices) {\r\n\tadapter2.add(device.getName());\r\n}\r\nadapter2.notifyDataSetChanged();\r\n```\r\n\r\n_# ここまでできたら確認！_\r\n\r\n\r\n# 4. 外部機器のデバイスのスキャンに対して応答する\r\n\r\n## MainActivity.java\r\n\r\n**initResButton()**メソッド内にコードを書いて完成させます。\r\n\r\n① 外部機器から自端末を発見可能にするためのアクションインテントを発行するコードを(en4-1)(en4-2)に書きましょう。\r\n\r\n```\r\nIntent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);\r\nstartActivityForResult(intent, REQUEST_BT_DISCOVERABLE);\r\n```\r\n\r\n② ①で実装した外部機器から自端末を発見可能にするためのアクションインテントを発行後の結果をonActivityResultで受け取るようなコードをonActivityResultメソッド内に書きましょう。\r\n\r\n```\r\nif (reqestCode == REQUEST_BT_DISCOVERABLE) {\r\n\tif (resultCode == Activity.RESULT_CANCELED) {\r\n\t  Toast.makeText(getApplicationContext(),\r\n          \"端末は探索可能な状態ではありません”,\r\n\t    Toast.LENGTH_SHORT).show();\r\n\t} else {\r\n\t  Toast.makeText(getApplicationContext(),\r\n\t    resultCode + \"秒間外部機器から探索可能状態です\",\r\n           Toast.LENGTH_SHORT).show();\r\n\t}\r\n}\r\n```\r\n\r\n_# ここまでできたら確認！_\r\n\r\n# 5. Bluetooth対応機器の情報表示\r\n\r\n## MainActivity.java\r\n\r\n①ListViewのアイテムクリックイベントを取得できるようにするために、MainActivityクラスにOnItemClickListenerをimplementsします。(5-1)\r\n\r\n```\r\npublic class MainActivity extends Activity implements OnItemClickListener {\r\n```\r\n\r\n②OnItemClickListenerのonItemClickコールバックメソッドをオーバーライドし、その中にクリックされた端末名の端末情報(端末名とMACアドレス)をトーストに表示するコードを書きましょう。(5-2)(5-3)\r\n\r\n```\r\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, \r\n　　　　　　　　　　　　　　　　　　　　　int position,long id) {\r\n    ListView listView = (ListView) parent;\r\n    String deviceName = (String) listView.getAdapter().getItem(position);\r\n    for (BluetoothDevice device : newDeviceList) {\r\n\tif (device.getName().equals(deviceName)) {\r\n\t  Toast.makeText(getApplicationContext(), \"端末名 = \" + device.getName() + \r\n\t\t   \" ¥nMAC ADDRESS = \" + device.getAddress(),\r\n\t\t   Toast.LENGTH_SHORT).show();\r\n\t  break;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n_# ここまでできたら確認！_\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}